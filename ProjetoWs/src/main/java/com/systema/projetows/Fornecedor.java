package com.systema.projetows;
// Generated 28/09/2020 12:30:31 by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * Fornecedor generated by hbm2java
 */
@Entity
@Table(name = "Fornecedor",
        catalog = "SistemaVendas"
)
public class Fornecedor implements java.io.Serializable {

    private Integer idFornecedor;
    private Endereco endereco;
    private String nome;
    private Long cnpj;
    private Long cpf;
    private String email;
    private String homePage;
    private List<Items> itemses;
    private List<NumeroContato> numeroContatos;

    public Fornecedor() {
    }

    public Fornecedor(Endereco endereco, String nome, Long cnpj, Long cpf, String email, String homePage, List<Items> itemses, List<NumeroContato> numeroContatos) {
        this.endereco = endereco;
        this.nome = nome;
        this.cnpj = cnpj;
        this.cpf = cpf;
        this.email = email;
        this.homePage = homePage;
        this.itemses = itemses;
        this.numeroContatos = numeroContatos;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "idFornecedor", unique = true, nullable = false)
    public Integer getIdFornecedor() {
        return this.idFornecedor;
    }

    public void setIdFornecedor(Integer idFornecedor) {
        this.idFornecedor = idFornecedor;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "endereco_id")
    public Endereco getEndereco() {
        return this.endereco;
    }

    public void setEndereco(Endereco endereco) {
        this.endereco = endereco;
    }

    @Column(name = "nome", length = 65)
    public String getNome() {
        return this.nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    @Column(name = "cnpj")
    public Long getCnpj() {
        return this.cnpj;
    }

    public void setCnpj(Long cnpj) {
        this.cnpj = cnpj;
    }

    @Column(name = "cpf")
    public Long getCpf() {
        return this.cpf;
    }

    public void setCpf(Long cpf) {
        this.cpf = cpf;
    }

    @Column(name = "email", length = 45)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "home-page", length = 45)
    public String getHomePage() {
        return this.homePage;
    }

    public void setHomePage(String homePage) {
        this.homePage = homePage;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "fornecedor")
    @Cascade(CascadeType.ALL)
    public List<Items> getItemses() {
        return this.itemses;
    }

    public void setItemses(List<Items> itemses) {
        this.itemses = itemses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "fornecedor")
    public List<NumeroContato> getNumeroContatos() {
        return this.numeroContatos;
    }

    public void setNumeroContatos(List<NumeroContato> numeroContatos) {
        this.numeroContatos = numeroContatos;
    }

//    METODOS ESPECIFICOS DA CLASSE
    public Items getItem(List<Items> items) {
        for (Items item : items) {
            if (this.idFornecedor == item.getFornecedor().getIdFornecedor()) {
                return item;
            }
        }
        return null;
    }

    public List<Items> FiltrodeItems(List<Items> items) {

        for (Items item : items) {
            if (this.idFornecedor == item.getFornecedor().idFornecedor) {
                this.itemses.add(item);
            }
        }

        return this.itemses;
    }
}
